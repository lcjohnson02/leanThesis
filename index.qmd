# Acknowledgements {.unnumbered}
\pagenumbering{arabic}

Firstly, I need to mention that this entire thesis has been formatted using the book *How To Prove It With Lean,* written by Daniel J. Velleman. His book was instrumental in learning to program in Lean and without this book all of my work would have been much more difficult. I would also like to give thanks to my thesis director Dr. White for the time and effort that he has put into this project. He chose to work with me on this project over the summer and without his guidance I could not have completed something of this scale. Another round of thanks should be given to my second reader, Zachary May. Zachary May is a senior software engineer with Upbound Group, specializing in web technologies and functional programming. He received his M.S. in computer science from the University of Kentucky in 2016, with a focus on software engineering, programming language theory, and natural language processing. His feedback has been quite beneficial in getting this up to the level of quality it is at now. Finally, I would like to thank my parents for supporting me throughout all of my schooling and always taking care of me.

# Preface

This thesis is intended to address the potential that the Lean programming language has in aiding with the verification of mathematical proofs. Lean was developed as a functional programming language with the intent that it could be used for theorem proving. Development on the language started in 2013 and has now seen four different fully released versions. I would recommend that while reading this thesis, you download Lean and put my code onto your own machine to see how it works. I have included a file on my github repository which contains code for each of the examples I put into the "Lean as a Theorem Prover" section of the thesis. The `Mathlib` package is not contained within this repository, so in order to see my examples for yourself, you will need to copy the examples into your own Lean project. While I have done my best to show the language in a way that displays both its positive and negative aspects, the best way to get a grasp for that will be to try it out for yourself. Instructions on how to install a copy of Lean can be found [here](https://lean-lang.org/lean4/doc/quickstart.html).

If you find this language interesting and would like to learn more, the textbook [How To Prove It With Lean](https://djvelleman.github.io/HTPIwL/) is a great starting point, and the textbook [Mathematics in Lean](https://leanprover-community.github.io/mathematics_in_lean/index.html) goes into further detail on some higher level topics such as calculus and topology. Lean also has a dedicated forum on [Zulip](https://leanprover.zulipchat.com) where other users can help address any questions regarding the language. I used the forum a few times while working on this project, and the feedback I recieved was quite helpful.